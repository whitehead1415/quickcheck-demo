name: lens
version: 4.4.0.2
id: lens-4.4.0.2-823b3926d3306e5f92399cd283be7604
license: BSD3
copyright: Copyright (C) 2012-2014 Edward A. Kmett
maintainer: Edward A. Kmett <ekmett@gmail.com>
stability: provisional
homepage: http://github.com/ekmett/lens/
package-url:
synopsis: Lenses, Folds and Traversals
description: This package comes \"Batteries Included\" with many useful lenses for the types
             commonly used from the Haskell Platform, and with tools for automatically
             generating lenses and isomorphisms for user-supplied data types.
             .
             The combinators in @Control.Lens@ provide a highly generic toolbox for composing
             families of getters, folds, isomorphisms, traversals, setters and lenses and their
             indexed variants.
             .
             An overview, with a large number of examples can be found in the <https://github.com/ekmett/lens#lens-lenses-folds-and-traversals README>.
             .
             An introductory video on the style of code used in this library by Simon Peyton Jones is available from <http://skillsmatter.com/podcast/scala/lenses-compositional-data-access-and-manipulation Skills Matter>.
             .
             A video on how to use lenses and how they are constructed is available on <http://youtu.be/cefnmjtAolY?hd=1 youtube>.
             .
             Slides for that second talk can be obtained from <http://comonad.com/haskell/Lenses-Folds-and-Traversals-NYC.pdf comonad.com>.
             .
             More information on the care and feeding of lenses, including a brief tutorial and motivation
             for their types can be found on the <https://github.com/ekmett/lens/wiki lens wiki>.
             .
             A small game of @pong@ and other more complex examples that manage their state using lenses can be found in the <https://github.com/ekmett/lens/blob/master/examples/ example folder>.
             .
             /Lenses, Folds and Traversals/
             .
             With some signatures simplified, the core of the hierarchy of lens-like constructions looks like:
             .
             .
             <<http://i.imgur.com/4fHw3Fd.png>>
             .
             <Hierarchy.png (Local Copy)>
             .
             You can compose any two elements of the hierarchy above using @(.)@ from the @Prelude@, and you can
             use any element of the hierarchy as any type it linked to above it.
             .
             The result is their lowest upper bound in the hierarchy (or an error if that bound doesn't exist).
             .
             For instance:
             .
             * You can use any 'Traversal' as a 'Fold' or as a 'Setter'.
             .
             * The composition of a 'Traversal' and a 'Getter' yields a 'Fold'.
             .
             /Minimizing Dependencies/
             .
             If you want to provide lenses and traversals for your own types in your own libraries, then you
             can do so without incurring a dependency on this (or any other) lens package at all.
             .
             /e.g./ for a data type:
             .
             > data Foo a = Foo Int Int a
             .
             You can define lenses such as
             .
             > -- bar :: Lens' (Foo a) Int
             > bar :: Functor f => (Int -> f Int) -> Foo a -> f (Foo a)
             > bar f (Foo a b c) = fmap (\a' -> Foo a' b c) (f a)
             .
             > -- quux :: Lens (Foo a) (Foo b) a b
             > quux :: Functor f => (a -> f b) -> Foo a -> f (Foo b)
             > quux f (Foo a b c) = fmap (Foo a b) (f c)
             .
             without the need to use any type that isn't already defined in the @Prelude@.
             .
             And you can define a traversal of multiple fields with 'Control.Applicative.Applicative':
             .
             > -- traverseBarAndBaz :: Traversal' (Foo a) Int
             > traverseBarAndBaz :: Applicative f => (Int -> f Int) -> Foo a -> f (Foo a)
             > traverseBarAndBaz f (Foo a b c) = Foo <$> f a <*> f b <*> pure c
             .
             What is provided in this library is a number of stock lenses and traversals for
             common haskell types, a wide array of combinators for working them, and more
             exotic functionality, (/e.g./ getters, setters, indexed folds, isomorphisms).
category: Data, Lenses, Generics
author: Edward A. Kmett
exposed: True
exposed-modules: Codec.Compression.Zlib.Lens Control.Exception.Lens
                 Control.Lens Control.Lens.Action Control.Lens.At
                 Control.Lens.Combinators Control.Lens.Cons Control.Lens.Each
                 Control.Lens.Empty Control.Lens.Equality Control.Lens.Extras
                 Control.Lens.Fold Control.Lens.Getter Control.Lens.Indexed
                 Control.Lens.Internal Control.Lens.Internal.Action
                 Control.Lens.Internal.Bazaar Control.Lens.Internal.ByteString
                 Control.Lens.Internal.Context Control.Lens.Internal.Deque
                 Control.Lens.Internal.Exception Control.Lens.Internal.FieldTH
                 Control.Lens.Internal.PrismTH Control.Lens.Internal.Fold
                 Control.Lens.Internal.Getter Control.Lens.Internal.Indexed
                 Control.Lens.Internal.Instances Control.Lens.Internal.Iso
                 Control.Lens.Internal.Level Control.Lens.Internal.Magma
                 Control.Lens.Internal.Prism Control.Lens.Internal.Reflection
                 Control.Lens.Internal.Review Control.Lens.Internal.Setter
                 Control.Lens.Internal.TH Control.Lens.Internal.Zoom
                 Control.Lens.Iso Control.Lens.Lens Control.Lens.Level
                 Control.Lens.Loupe Control.Lens.Operators Control.Lens.Plated
                 Control.Lens.Prism Control.Lens.Reified Control.Lens.Review
                 Control.Lens.Setter Control.Lens.TH Control.Lens.Traversal
                 Control.Lens.Tuple Control.Lens.Type Control.Lens.Wrapped
                 Control.Lens.Zoom Control.Monad.Error.Lens
                 Control.Monad.Primitive.Lens Control.Parallel.Strategies.Lens
                 Control.Seq.Lens Data.Array.Lens Data.Bits.Lens
                 Data.ByteString.Lens Data.ByteString.Strict.Lens
                 Data.ByteString.Lazy.Lens Data.Complex.Lens Data.Data.Lens
                 Data.Dynamic.Lens Data.HashSet.Lens Data.IntSet.Lens Data.List.Lens
                 Data.List.Split.Lens Data.Map.Lens Data.Sequence.Lens Data.Set.Lens
                 Data.Text.Lens Data.Text.Strict.Lens Data.Text.Lazy.Lens
                 Data.Tree.Lens Data.Typeable.Lens Data.Vector.Lens
                 Data.Vector.Generic.Lens Generics.Deriving.Lens GHC.Generics.Lens
                 System.Exit.Lens System.FilePath.Lens System.IO.Error.Lens
                 Language.Haskell.TH.Lens Numeric.Lens
hidden-modules: Paths_lens
trusted: False
import-dirs: /home/whitehead/workspace/haskell/.cabal-sandbox/lib/x86_64-linux-ghc-7.8.3/lens-4.4.0.2
library-dirs: /home/whitehead/workspace/haskell/.cabal-sandbox/lib/x86_64-linux-ghc-7.8.3/lens-4.4.0.2
hs-libraries: HSlens-4.4.0.2
extra-libraries:
extra-ghci-libraries:
include-dirs:
includes:
depends: array-0.5.0.0-98aa445e59f3eb0c886795ff07406d84
         base-4.7.0.1-e4b74d27ad8c8987c63abc42a80e7335
         bifunctors-4.1.1.1-46a5df6ed1bfc619f966715d799b4cb3
         bytestring-0.10.4.0-9f46be651278ecf2e2b21a220bfff6bf
         comonad-4.2.2-df51be1b06b66520621ac141676f4c11
         containers-0.5.5.1-23e2a2b94d6e452c773209f31d8672c5
         contravariant-1.2-df4ff318c3a5bf10d4b5cf22dc269785
         distributive-0.4.4-d473ce4c79fca29db4df42e5c4c3d2a2
         exceptions-0.6.1-8af3ca4f7a1628497df1da60de67e172
         filepath-1.3.0.2-1580a61d3226e4be45fe2130dc2881e3
         free-4.9-fc43efae8d63829e94df750a2a7437dc
         ghc-prim-0.3.1.0-954cb57749cf319beafdc89b3415422c
         hashable-1.2.2.0-ad662458cc9782e2c8923d91c8abb5f8
         mtl-2.2.1-7e36fa184fee4ff5c892cec1466dde72
         parallel-3.2.0.4-e7d84d2578e6412ec995ab7b1bd5ca95
         primitive-0.5.3.0-7c06c0e396473356733b3f1e38c6f879
         profunctors-4.2.0.1-0a6658666025b554d4fe30a532e80c3d
         reflection-1.5.1-e781cdf3179931dd11936b0a5ba72d6c
         semigroupoids-4.2-afeda35dff4185b51eb29dab6727d022
         semigroups-0.15.3-671a48d5e22708a4c8b8edf46c1c3d5d
         split-0.2.2-7c6e2bd13c1e04b85cc7ee759efb1a08
         tagged-0.7.2-28286204801522ac85a55fc42ce891dc
         template-haskell-2.9.0.0-3afdeeadb657091939ef0bfa600dc614
         text-1.2.0.0-ffab9bda69053aae90caff0c3f8721f6
         transformers-0.4.1.0-9a62dbc64bb360c6252ee64b2db3318b
         transformers-compat-0.3.3.4-016d59eabfa256fa5877df8a03d16908
         unordered-containers-0.2.5.0-f5a2900f6d1819afc0154cf2f8a83599
         vector-0.10.11.0-abf7804e8d36eb31459401947c1e92cf
         void-0.6.1-353d47c85e3041c3de07abcceb6bd020
         zlib-0.5.4.1-a1b859f72d59bc2f7dc258ab67b1bbb0
hugs-options:
cc-options:
ld-options:
framework-dirs:
frameworks:
haddock-interfaces: /home/whitehead/workspace/haskell/.cabal-sandbox/share/doc/x86_64-linux-ghc-7.8.3/lens-4.4.0.2/html/lens.haddock
haddock-html: /home/whitehead/workspace/haskell/.cabal-sandbox/share/doc/x86_64-linux-ghc-7.8.3/lens-4.4.0.2/html
